import { shallowMount } from "@vue/test-utils";
import DCheckbox from "@/components/atoms/d-checkbox";
import { BASE_COLOR_SCHEME } from "@/components/atoms/d-checkbox/constants";
import { SIZE } from "@darwin-studio/vue-ui-codegen/dist/constants/size";
import config from "@/components/atoms/d-checkbox/config";
import {
  baseClassCase,
  controlIdAbsenceCase,
  controlIdAutogeneratedCase,
  controlIdPresenceCase,
  errorClassCase,
  errorFontCase,
  errorHtmlCase,
  errorSlotCase,
  errorStringCase,
  inputAttrsCase,
  inputClassCase,
  inputValueCase,
  labelClassCase,
  labelFontCase,
  labelHtmlCase,
  labelPresenceCase,
  labelSlotCase,
  minControlWidthCase,
  outlineClassCase,
  sizeClassCase,
  tagCase,
} from "@/utils/test-case-factories";

describe("DCheckbox", () => {
  const wrapper = shallowMount(DCheckbox);

  baseClassCase(wrapper, config.className);

  it("Should render input element with checkbox type", () => {
    const inputEl = wrapper.find("input");
    expect(inputEl.exists()).toBeTruthy();
    expect(inputEl.attributes().type).toBe("checkbox");
  });

  inputValueCase(wrapper);

  inputClassCase(wrapper);

  inputAttrsCase(wrapper);

  minControlWidthCase(wrapper);

  it(`Should render default icon width ${config.checkMark}`, () => {
    expect(true).toBeFalsy();
  });

  it("Should render icon slot instead of default icon", () => {
    const slotIconClass = "slotAfter";
    const slotIcon = `<div class=${slotIconClass}>icon slot content</div>`;
    const wrapper = shallowMount(DCheckbox, {
      slots: {
        icon: slotIcon,
      },
    });
    const slotIconContainerEl = wrapper.find(
      `.${config.iconContainerClassName}`
    );
    expect(slotIconContainerEl.exists()).toBeTruthy();
    const slotIconEl = wrapper.find(`.${slotIconClass}`);
    expect(slotIconEl.exists()).toBeTruthy();
  });

  it("Icon container classes should contain props.iconContainerClass if passed", () => {
    expect(true).toBeFalsy();
  });

  it("Icon container classes should contain __disabled if props.disabled passed", () => {
    expect(true).toBeFalsy();
  });

  labelPresenceCase(wrapper, `.${config.labelInnerClassName}`);

  labelClassCase(wrapper);

  labelFontCase(wrapper);

  labelHtmlCase(wrapper);

  labelSlotCase(DCheckbox);

  it("Label classes should contain __disabled if props.disabled passed", () => {
    expect(true).toBeFalsy();
  });

  controlIdPresenceCase(wrapper);

  controlIdAbsenceCase(wrapper);

  controlIdAutogeneratedCase(wrapper);

  outlineClassCase(
    wrapper,
    wrapper.find("input"),
    BASE_COLOR_SCHEME,
    SIZE.LARGE
  );

  sizeClassCase(wrapper, wrapper.find("input"));

  it("iconContainer classes should contain size class depended of props.size", () => {
    expect(true).toBeFalsy();
  });

  it("iconContainer classes should contain transition class depended of props.transition", () => {
    expect(true).toBeFalsy();
  });

  errorStringCase(wrapper, config.errorClassName);

  errorClassCase(wrapper, config.errorClassName);

  errorFontCase(wrapper, config.errorClassName);

  errorHtmlCase(wrapper, config.errorClassName);

  errorSlotCase(DCheckbox, config.errorClassName);

  // TODO: on\whenChange handlers - factories
  // TODO: on\whenInput handlers - factories

  tagCase(wrapper);
});
