import { mount, shallowMount } from "@vue/test-utils";
import { baseClassCase } from "@darwin-studio/vue-ui/src/utils/test-case-factories";
import { SIZE } from "@darwin-studio/vue-ui-codegen/dist/constants/size";
import { FONT } from "@darwin-studio/vue-ui-codegen/dist/constants/font";
import { DTabs, DTab, DTabpanel } from "./index";
import config from "./config";

// TODO: move to the config
jest.mock("chalk", () => ({
  greenBright: jest.fn(),
  red: jest.fn(),
  yellowBright: jest.fn(),
}));

describe("DTabs", () => {
  const wrapper = mount(DTabs);

  /*  baseClassCase(wrapper, config.tabsClassName);

  it("Should render config.tablistClassName to the tablist's class name", () => {
    const tablist = wrapper.find(`.${config.tablistClassName}`);
    expect(tablist).toBeTruthy();
  });

  it("Should render props.tablistLabel to the tablist's aria-label attr", async () => {
    const tablistLabel = "Some aria label";
    await wrapper.setProps({ tablistLabel });
    const tablist = wrapper.find(`.${config.tablistClassName}`);
    expect(tablist.attributes("aria-label")).toBe(tablistLabel);
  });

  it("Should props.tablistClass to the tablist's class name", async () => {
    const tablistClass = "some-tablist-class";
    await wrapper.setProps({ tablistClass });
    const tablist = wrapper.find(`.${config.tablistClassName}`);
    expect(tablist.classes()).toContain(tablistClass);
  });
*/
  it("Should render props.tabs as content of the tablist", async () => {
    // TODO: without mounting new component ???
    const wrapper = await mount(DTabs, {
      props: {
        tabs: [
          <DTab id="111" tabpanelId="111-1" active={true} label={"Tab 1"} />,
          <DTab id="222" tabpanelId="222-2" label={"Tab 2"} />,
        ],
      },
    });

    const tablist = wrapper.find(`.${config.tablistClassName}`);
    const tabs = tablist.findAllComponents(DTab);
    expect(tabs?.[0]?.element).toMatchSnapshot(); // TODO: find out other way to compare
    expect(tabs?.[1]?.element).toMatchSnapshot(); // TODO: find out other way to compare
  });

  it("Should render slots.tabs as content of the tablist", async () => {
    // TODO: without mounting new component ???
    const wrapper = await mount(DTabs, {
      slots: {
        tabs: [
          <DTab id="111" tabpanelId="111-1" active={true} label={"Tab 1"} />,
          <DTab id="222" tabpanelId="222-2" label={"Tab 2"} />,
        ],
      },
    });

    const tablist = wrapper.find(`.${config.tablistClassName}`);
    const tabs = tablist.findAllComponents(DTab);
    expect(tabs?.[0]?.element).toMatchSnapshot(); // TODO: find out other way to compare
    expect(tabs?.[1]?.element).toMatchSnapshot(); // TODO: find out other way to compare
  });

  /*
    // TODO: props.tabsSize
    it("Should pass props.tabSize as props.size to containing DTab components", async () => {
      const tabSize = SIZE.LARGE;
      await wrapper.setProps({
        tabSize,
        tabs: [<DTab id="111" active={true} label={"Tab 1"} />],
      });
      const tabWrapper = wrapper.findComponent(DTab);
      console.log(tabWrapper.classes());
      expect(tabWrapper.classes()).toBe(SIZE.LARGE);
    });

    // TODO: DTab id autogenerate
    it("Should pass autogenerated id to containing DTab components if not passed", async () => {
      expect(true).toBeFalsy();
    });

    // TODO: DTab <-> DTabpanel connection
    it("Should pass DTabpanel's prop.id to the corresponding DTab as prop.tabpanelId", async () => {
      expect(true).toBeFalsy();
    });

    // TODO: props.tabpanels
    it("Should render props.tabpanels as content the list of tabpanels", async () => {
      const tabpanel1 = shallowMount(DTabpanel);
      const tabpanel2 = shallowMount(DTabpanel);
      await wrapper.setProps({ tabs: [tabpanel1, tabpanel2] });
      expect(true).toBeFalsy();
    });

    // TODO: slots.tabpanels
    it("Should render slots.tabs as content of the tablist", async () => {
      const tabpanel1 = shallowMount(DTabpanel);
      const tabpanel2 = shallowMount(DTabpanel);
      const wrapper = await mount(DTabs, {
        slots: {
          tabs: [tabpanel1, tabpanel2],
        },
      });
      expect(true).toBeFalsy();
    });

    // TODO: props.tabpanelsFont
    it("Should pass props.tabpanelsFont as props.font to containing DTabpanel components", async () => {
      const tabpanelsFont = FONT.SMALL;
      const tabpanel = await shallowMount(DTabpanel);
      await wrapper.setProps({ tabpanelsFont, tabs: [tabpanel] });
      expect(true).toBeFalsy();
    });

    // TODO: DTabpanel id autogenerate
    it("Should pass autogenerated id to containing DTabpanel components if not passed", async () => {
      expect(true).toBeFalsy();
    });

    // TODO: DTabpanel <-> DTab connection
    it("Should pass DTab's prop.id to the corresponding DTabpanel as prop.tabId", async () => {
      expect(true).toBeFalsy();
    });*/

  // Classes and behaviour
  // TODO: props.disabled
  // TODO: props.padding
  // TODO: props.transition
  // TODO: props.tag
  // TODO: props.tablistTag
  // TODO: props.enableHtml

  // TODO: DTab.props
  // active ???
  // TODO: DTab.onClick
  // TODO: DTab.whenClick
  // TODO: DTabpanel.props
  // active ???

  // TODO: arrow navigation
});
