import { mount } from "@vue/test-utils";
import DSlider from "@darwin-studio/vue-ui/src/components/atoms/d-slider";
import { COLOR_SCHEME } from "@darwin-studio/ui-codegen/dist/constants/color-scheme";
import { SIZE } from "@darwin-studio/ui-codegen/dist/constants/size";
import {
  baseClassCase,
  captionAbsenceCase,
  captionStringCase,
  colorSchemeClassCase,
  controlIdAbsenceCase,
  controlIdAutogeneratedCase,
  controlIdPresenceCase,
  disabledAttrCase,
  fontSizeClassCase,
  inputValueCase,
  labelAbsenceCase,
  labelStringCase,
  minControlWidthCase,
  outlineClassCase,
  roundingClassCase,
  sizeClassCase,
  slotCase,
  tagCase,
  transitionClassCase,
} from "@darwin-studio/vue-ui/src/utils/test-case-factories";
import config from "./config";

describe("DSlider", () => {
  const wrapper = mount(DSlider);

  baseClassCase(wrapper, config.className);

  controlIdAbsenceCase(wrapper);

  controlIdPresenceCase(wrapper);

  controlIdAutogeneratedCase(wrapper);

  inputValueCase(wrapper, 33);

  // TODO: attr case factory
  it("Should render props.min to the input's min attr", async () => {
    const min = 13;
    await wrapper.setProps({ min });

    const inputEl = wrapper.find(`.${config.inputClassName}`);
    expect(inputEl.attributes().min).toBe(String(min));
  });

  it("Should render props.max to the input's max attr", async () => {
    const max = 66;
    await wrapper.setProps({ max });

    const inputEl = wrapper.find(`.${config.inputClassName}`);
    expect(inputEl.attributes().max).toBe(String(max));
  });

  it("Should render props.step to the input's step attr", async () => {
    const step = 4;
    await wrapper.setProps({ step });

    const inputEl = wrapper.find(`.${config.inputClassName}`);
    expect(inputEl.attributes().step).toBe(String(step));
  });

  labelAbsenceCase(wrapper);

  labelStringCase(wrapper);

  slotCase(DSlider, `.${config.labelClassName}`, "label");

  it("Should render props.labelOffset to the label style as '--offset: props.labelOffset'", async () => {
    const labelOffset = 33;
    await wrapper.setProps({
      labelOffset,
    });

    const labelEl = wrapper.find(`.${config.labelClassName}`);
    expect(labelEl.attributes("style")).toContain(`--offset: ${labelOffset}`);
  });

  colorSchemeClassCase(
    wrapper,
    `.${config.trackClassName}`,
    COLOR_SCHEME.DANGER
  );

  slotCase(DSlider, `.${config.trackClassName}`, "track");

  it("Shouldn't render caption element if props.caption isn't passed", async () => {
    await wrapper.setProps({ caption: undefined });
    const captionEl = wrapper.find(`.${config.captionClassName}`);
    expect(captionEl.exists()).toBeFalsy();
    await wrapper.setProps({ caption: "not empty" });
  });

  it("Should render caption element with props.caption content if passed", async () => {
    const captionContent = "some caption";
    const caption = <div>{captionContent}</div>;
    await wrapper.setProps({ caption });

    const captionEl = wrapper.find(`.${config.captionClassName}`);
    expect(captionEl.exists()).toBeTruthy();
    expect(captionEl.text()).toBe(captionContent);
  });

  slotCase(DSlider, `.${config.captionClassName}`, "caption");

  it("Should render props.captionOffset to the caption style as '--offset: props.captionOffset'", async () => {
    const captionOffset = 33;
    await wrapper.setProps({
      caption: "Caption string",
      captionOffset,
    });

    const captionEl = wrapper.find(`.${config.captionClassName}`);
    expect(captionEl.attributes("style")).toContain(
      `--offset: ${captionOffset}`
    );
  });

  colorSchemeClassCase(
    wrapper,
    `.${config.inputClassName}`,
    COLOR_SCHEME.DANGER
  );

  outlineClassCase(
    wrapper,
    `.${config.inputClassName}`,
    COLOR_SCHEME.DANGER,
    SIZE.SMALL
  );

  roundingClassCase(wrapper, `.${config.trackClassName}`);

  roundingClassCase(wrapper, `.${config.inputClassName}`);

  sizeClassCase(wrapper, `.${config.className}`);

  fontSizeClassCase(wrapper, `.${config.labelClassName}`);

  minControlWidthCase(wrapper);

  transitionClassCase(wrapper, `.${config.captionClassName}`);

  disabledAttrCase(wrapper, `.${config.inputClassName}`);

  tagCase(wrapper);

  // TODO on/whenChange
  it("Should render props. ...", async () => {
    expect(true).toBeFalsy();
  });

  // TODO on/whenInput
  it("Should render props. ...", async () => {
    expect(true).toBeFalsy();
  });

  // TODO on:update:value
  it("Should render props. ...", async () => {
    expect(true).toBeFalsy();
  });

  // TODO: props. ...Options
});
