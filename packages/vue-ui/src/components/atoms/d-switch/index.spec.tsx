import { mount } from "@vue/test-utils";
import {
  baseClassCase,
  controlIdAutogeneratedCase,
  controlIdPresenceCase,
  errorAbsenceCase,
  errorClassCase,
  errorFontCase,
  errorHtmlCase,
  errorSlotCase,
  errorStringCase,
  inputClassCase,
  roundingClassCase,
  sizeClassCase,
  tagCase,
  transitionClassCase,
} from "@/utils/test-case-factories";
import DSwitch from "@/components/atoms/d-switch/index";
import config from "@/components/atoms/d-switch/config";

describe("DSwitch", () => {
  const wrapper = mount(DSwitch);

  baseClassCase(wrapper, config.className);

  it("Should render input element with checkbox type", () => {
    const inputEl = wrapper.find("input");
    expect(inputEl.exists()).toBeTruthy();
    expect(inputEl.attributes().type).toBe("checkbox");
  });

  it("Should render input element with switch role", () => {
    const inputEl = wrapper.find("input");
    expect(inputEl.exists()).toBeTruthy();
    expect(inputEl.attributes().role).toBe("switch");
  });

  controlIdPresenceCase(wrapper);

  controlIdAutogeneratedCase(wrapper);

  // TODO: checked
  it("Should render checked attr if props.checked is true", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn't render checked attr if props.checked is falsy", async () => {
    // TODO expect(true).toBeFalsy();
  });

  // TODO: values
  it("Shouldn render value attr if props.values.truthy is presented", async () => {
    // TODO expect(true).toBeFalsy();
  });

  // TODO: labels
  it("Shouldn render .label if props.labels.falsy is presented", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn render $slots.labelFalsy if presented", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn render .label if props.labels.truthy is presented", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn render .label with font class", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn render $slots.labelTruthy if presented", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Should render .label content as HTML if props.enableHtml is true", async () => {
    // TODO expect(true).toBeFalsy();
  });

  inputClassCase(wrapper);

  roundingClassCase(wrapper, `.${config.inputClassName}`);

  roundingClassCase(wrapper, `.${config.trackClassName}`);

  roundingClassCase(wrapper, `.${config.thumbClassName}`);

  sizeClassCase(wrapper, `.${config.trackClassName}`);

  sizeClassCase(wrapper, `.${config.thumbClassName}`);

  transitionClassCase(wrapper, `.${config.trackClassName}`);

  transitionClassCase(wrapper, `.${config.thumbClassName}`);

  transitionClassCase(wrapper, `.${config.thumbInnerClassName}`);

  errorAbsenceCase(wrapper, config.errorClassName);

  errorStringCase(wrapper, config.errorClassName);

  errorFontCase(wrapper, config.errorClassName);

  errorClassCase(wrapper, config.errorClassName);

  errorHtmlCase(wrapper, config.errorClassName);

  errorSlotCase(DSwitch, config.errorClassName);

  it("Shouldn render props.font into font class for .label, .thumb. and .error elements", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn render props.colorScheme into font class for .track element", async () => {
    // TODO expect(true).toBeFalsy();
  });

  // TODO: disabled
  it("Shouldn render disabled attr for input element if props.disabled is true", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn't render disabled attr for input element if props.disabled is falsy", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn render aria-disabled attr for input element if props.disabled is true", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn't render aria-disabled attr for input element if props.disabled is falsy", async () => {
    // TODO expect(true).toBeFalsy();
  });

  it("Shouldn render .__disabled class for .track and .label elements if props.disabled is true", async () => {
    // TODO expect(true).toBeFalsy();
    // styles.__disabled
    // colorSchemeStyles.__disabled
  });

  it("Shouldn't render .__disabled class for .track and .label elements if props.disabled is false", async () => {
    // TODO expect(true).toBeFalsy();
    // styles.__disabled
    // colorSchemeStyles.__disabled
  });

  tagCase(wrapper);

  it("Should emit onChange event with checked and value payload", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });
  it("Shouldn't emit onChange if props.disabled is passed", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });
  it("Should call passed props.whenChange", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });
  it("Shouldn't call passed props.whenChange if props.disabled passed", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });

  it("Should emit onInput event with value payload", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });

  it("Shouldn't emit onInput if props.disabled is passed", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });

  it("Should call passed props.whenInput", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });

  it("Shouldn't call passed props.whenInput if props.disabled passed", async () => {
    // TODO expect(true).toBeFalsy();
    // - values
  });

  it("Should render $slots.thumb", async () => {
    // TODO expect(true).toBeFalsy();
  });
});
